@page "{id:int}"
@model ScrumApplication.Pages.Events.EditEventModel
@{
    ViewData["Title"] = "Edytuj wydarzenie";
}

<h1>Edytuj wydarzenie</h1>

<form id="taskForm" method="post" novalidate>
    <input type="hidden" asp-for="Id" />

    <div class="mb-3">
        <label asp-for="Title" class="form-label">Tytuł</label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Description" class="form-label">Opis</label>
        <textarea asp-for="Description" class="form-control"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="StartDate" class="form-label">Data i godzina rozpoczęcia</label>
        <input asp-for="StartDate" type="datetime-local" class="form-control" />
        <span asp-validation-for="StartDate" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="EndDate" class="form-label">Data i godzina zakończenia</label>
        <input asp-for="EndDate" type="datetime-local" class="form-control" />
        <span asp-validation-for="EndDate" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary">Zapisz</button>
    <a asp-page="/Events/Index" class="btn btn-secondary ms-2">Anuluj</a>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        function showToast(message, type = 'success') {
            const toastId = 'toast' + Date.now();
            const toastHtml = `
            <div id="${toastId}" class="toast align-items-center text-bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
              <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" aria-label="Zamknij"></button>
              </div>
            </div>`;
            const container = document.getElementById('toastContainer');
            container.insertAdjacentHTML('beforeend', toastHtml);
            const toastElement = document.getElementById(toastId);

            const closeBtn = toastElement.querySelector('button.btn-close');
            closeBtn.addEventListener('click', () => {
                const bsToast = bootstrap.Toast.getInstance(toastElement);
                if (bsToast) bsToast.hide();
            });

            const bsToast = new bootstrap.Toast(toastElement, { delay: 3000 });
            bsToast.show();
            toastElement.addEventListener('hidden.bs.toast', () => toastElement.remove());
        }

        document.getElementById('taskForm').addEventListener('submit', function (e) {
            let isValid = true;

            const title = this.querySelector('input[name="Title"]').value.trim();
            const desc = this.querySelector('textarea[name="Description"]').value.trim();
            const startDateValue = this.querySelector('input[name="StartDate"]').value;
            const endDateValue = this.querySelector('input[name="EndDate"]').value;
            if (!isValid) {
                e.preventDefault();
            }
        });

        window.onload = function () {
            var toastMsg = '@TempData["ToastMessage"]';
            var toastType = '@TempData["ToastType"]' || 'success';
            if (toastMsg) {
                showToast(toastMsg, toastType);
            }
        }
    </script>
    <script>
        const currentEventId = @Model.Id;
    </script>
}
